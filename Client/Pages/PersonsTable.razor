@page "/people"
@page "/people/{personId:int}"
@inject HttpClient Http
@inject IDialogService Dialog
@inject NavigationManager NavigationManager

@if (emptyTable) {
    <MudPaper Class="d-flex flex-column align-center justify-center py-2 px-1 table-loading-mudpaper" Elevation="12">
        <MudText Typo="Typo.h5" Align="Align.Center">Add Your First Person!</MudText>
        <MudButton Class="my-4" Color="Color.Success" Bu Size="Size.Large" StartIcon="@Filled.Add" Link="/person/new">Add Person</MudButton>
    </MudPaper>
} else {
    <MudTable Items="@AllPersons" Hover="true" Elevation="10" FixedHeader="true" Class="ma-4 pa-8" Filter="new Func<Person, bool>(SearchFilter)">
        <ColGroup>
            <col/>
            <col/>
            <col/>
            <col/>
            <col/>
            <col/>
            <col style="width: 10%;"/>
        </ColGroup>
        <ToolBarContent>
            <MudButton Color="Color.Success" Size="Size.Large" StartIcon="@Filled.Add" Link="/person/new">Add Person</MudButton>
            <MudToolBarSpacer/>
            <MudTextField @bind-Value="searchString" Placeholder="Search" Immediate="true" Adornment="Adornment.Start" AdornmentIcon="@Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>First Name</MudTh>
            <MudTh>Last Name</MudTh>
            <MudTh>SIN</MudTh>
            <MudTh Style="text-align: center;">Address</MudTh>
            <MudTh Style="text-align: center;">Pets</MudTh>
            <MudTh Style="text-align: center;">Vehicles</MudTh>
            <MudTh Style="text-align: center;">Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="First Name">@context.firstName</MudTd>
            <MudTd DataLabel="Last Name">@context.lastName</MudTd>
            <MudTd DataLabel="SIN">@context.sin</MudTd>
            <MudTd DataLabel="Address" Style="text-align: center;">
                @if (!personAddress(context)) {
                    <MudIconButton Class="action-btn" Color="Color.Success" Size="Size.Medium" Icon="@Icons.Material.Add" Link="@($"address/new/" + context.Id)"></MudIconButton>
                } else {
                    <MudIconButton Class="action-btn" Color="Color.Tertiary" Size="Size.Medium" Icon="@Icons.Material.Edit" Link="@($"address/update/" + addressIdToUpdate(context))"></MudIconButton>
                }
                <MudIconButton Class="action-btn" Color="Color.Error" Icon="@Icons.Material.Delete" OnClick="@((e) => DeleteAddressDialog(context))"/>
            </MudTd>
            <MudTd DataLabel="Pets" Style="text-align: center;">
                <MudIconButton Class="action-btn" Color="Color.Success" Size="Size.Medium" Icon="@Icons.Material.Add" Link="@($"pet/new/" + context.Id)"></MudIconButton>
                @if (personPet(context)) {
                    <MudIconButton Class="action-btn" Color="Color.Warning" Size="Size.Medium" Icon="@Icons.Material.RemoveRedEye" Link="@($"pet/list/" + context.Id)"></MudIconButton>
                } else {
                    <MudIconButton Disabled="true" Size="Size.Medium" Icon="@Icons.Material.RemoveRedEye"></MudIconButton>
                }
                @* <MudIconButton Class="action-btn" Color="Color.Error" Icon="@Icons.Material.Delete" OnClick="@((e) => DeletePetDialog(context))"/> *@
            </MudTd>
            <MudTd DataLabel="Vehicles" Style="text-align: center;"></MudTd>
            <MudTd DataLabel="Actions" Style="text-align: center;">
                <MudIconButton Class="action-btn" Color="Color.Tertiary" Icon="@Icons.Material.Edit" Link="@($"person/update/" + context.Id)"/>
                <MudIconButton Class="action-btn" Color="Color.Error" Icon="@Icons.Material.Delete" OnClick="@((e) => DeletePersonDialog(context))"/>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new[] {10, 25}"/>
        </PagerContent>
    </MudTable>
}

@code {
    private string addressIdToUpdate(Person addressOwner) {
        return addressOwner.Addresses[0].Id.ToString();
    }
}

@code {
    private bool personPet(Person petOwner) {
        uint ownerPetCount = (uint) petOwner.Pets.Count;
        if (ownerPetCount > 0) {
            return true;
        }

        return false;
    }
}

@code {
    private bool personAddress(Person addressOwner) {
        uint ownerAddressCount = (uint) addressOwner.Addresses.Count;
        if (ownerAddressCount > 0) {
            return true;
        }

        return false;
    }
}

@code {
    async Task DeleteAddressDialog(Person person) {
        DialogParameters dialogParams = new DialogParameters();
        dialogParams.Add("address", person.Addresses[0]);

        IDialogReference dialog = Dialog.Show<DeleteAddressDialog>("Delete Address for Person: " + person.firstName + " " + person.lastName, dialogParams);
        DialogResult result = await dialog.Result;

        if (!result.Cancelled) {
            AllPersons = (await Http.GetFromJsonAsync<List<Person>>("Person/GetAll"));
        }
    }
}

@code {
    async Task DeletePersonDialog(Person person) {
        DialogParameters dialogParams = new DialogParameters();
        dialogParams.Add("person", person);

        IDialogReference dialog = Dialog.Show<DeletePersonDialog>("Delete Person: " + person.firstName + " " + person.lastName, dialogParams);
        DialogResult result = await dialog.Result;

        if (!result.Cancelled) {
            AllPersons = (await Http.GetFromJsonAsync<List<Person>>("Person/GetAll"));
        }
    }
}

@code {
    [Parameter]
    public int personId { get; set; }

    private List<Person> AllPersons = new List<Person>();
    bool emptyTable = false;

    protected override async Task OnInitializedAsync() {
        if (personId != 0) {
            Person singlePerson = await Http.GetFromJsonAsync<Person>("Person/Get/" + (uint) personId);
            AllPersons.Clear();
            AllPersons.Add(singlePerson);
        } else {
            AllPersons = await Http.GetFromJsonAsync<List<Person>>("Person/GetAll");
            if (AllPersons.Count == 0) {
                emptyTable = true;
            }
        }
    }
}

@code {
    private string searchString = "";

    bool SearchFilter(Person filteredPerson) {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (filteredPerson.firstName.Contains(searchString, StringComparison.InvariantCultureIgnoreCase))
            return true;
        if (filteredPerson.lastName.Contains(searchString, StringComparison.InvariantCultureIgnoreCase))
            return true;
        if (filteredPerson.sin.Contains(searchString, StringComparison.InvariantCultureIgnoreCase))
            return true;
        
        return false;
    }
}