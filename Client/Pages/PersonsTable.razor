@page "/person"
@inject HttpClient http
@inject IDialogService Dialog

@if (AllPersons.Count == 0) {
    <MudPaper Class="d-flex flex-column align-center justify-center py-2 px-1 table-loading-mudpaper" Elevation="12">
        <MudText Typo="Typo.h5" Align="Align.Center">Loading Table Data...</MudText>
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mt-6 pa-2 mx-2 align-self-center"/>
    </MudPaper>
}
else {
    <MudTable Items="@AllPersons" Hover="true" Elevation="10" FixedHeader="true" Class="ma-4 pa-8" Filter="new Func<Person, bool>(SearchFilter)">
        <ToolBarContent>
            <MudButton Color="Color.Success" Size="Size.Large" StartIcon="@Filled.Add" Link="/person/new">Add Person</MudButton>
            <MudToolBarSpacer/>
            <MudTextField @bind-Value="search_string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>First Name</MudTh>
            <MudTh>Last Name</MudTh>
            <MudTh>SIN</MudTh>
            <MudTh>Address</MudTh>
            <MudTh>Pets</MudTh>
            <MudTh>Vehicles</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="First Name">@context.firstName</MudTd>
            <MudTd DataLabel="Last Name">@context.lastName</MudTd>
            <MudTd DataLabel="SIN">@context.sin</MudTd>
            <MudTd DataLabel="Address"></MudTd>
            <MudTd DataLabel="Pets"></MudTd>
            <MudTd DataLabel="Vehicles"></MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Color="Color.Tertiary" Link=@($"person/update/" + context.Id)>Edit</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new[] {10, 25}"/>
        </PagerContent>
    </MudTable>
}

@code {
    private List<Person> AllPersons = new List<Person>();

    protected override async Task OnInitializedAsync() {
        AllPersons = await http.GetFromJsonAsync<List<Person>>("Person/GetAll");
    }

}

@code {
    private string search_string = "";

    bool SearchFilter(Person filteredPerson) {
        if (string.IsNullOrWhiteSpace(search_string))
            return true;
        if (filteredPerson.firstName.Contains(search_string))
            return true;
        if (filteredPerson.lastName.Contains(search_string))
            return true;
        if (filteredPerson.sin.ToString().Contains(search_string))
            return true;
        return false;
    }

}